import java.util.ArrayList;

class Cloture {
    public static void main(String[] args) {
        int[][] carte = {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
            {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0},
            {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0},
            {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0},
            {0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
            {0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
            {0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
            {0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
            {0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
            {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
            {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        };
        
        //Print map
        for (int[] lign:carte) {
        	for (int val:lign) {
        		System.out.print(val);
        	}  
        	System.out.print("\n");
        }
        
        
        //Check map values for only 0 & 1, check map shape (rectangular)
        for (int i = 0; i < carte.length; ++i) {	
        for (int j =0; j < carte[i].length; ++j) {
        		
        	if (carte[i][j] != 0 && carte[i][j] != 1) {
        		System.out.print("Votre carte du terrain n'a pas le bon format :\nvaleur '" + carte[i][j] + "' trouvée en position [" + i + "][" + j +"]");
        	}
        }
        	
        	if ( i != 0 && carte[i].length != carte[i-1].length) {
        		System.out.print("Votre carte du terrain n'a pas le bon format :\nligne [" + (i-1) + "] n'a pas le même nombre de valeurs que ligne [" + i + "]");
        	}
        }
        
        //Check line convexity
        ArrayList<Integer> positions = new ArrayList<Integer>();
        for (int i = 0; i < carte.length; ++i) {	
        for (int j =0; j < carte[i].length; ++j) {
        	if (carte[i][j]==0) {
        		
        	}
        }
        }
        
        
        //Remove Ponds
        for (int i = 0; i < carte.length; ++i) {
        	
        	int firstZero = -1; //stores index of first Zero (inside terrain only)
        	
        for (int j =0; j+1 < carte[i].length; ++j) {
        	//We don't need to iterate the last item. It is checked in case j-1 == 0
        	// Detect a 1 just before a 0
        	if (carte[i][j] == 1 && carte[i][j+1] == 0) {
        		firstZero = j;
        		
        	}
        	//Detect a 0 just before a 1, inside the terrain (there has been a 1 before)
        	else if (carte[i][j] == 0 && carte[i][j+1] == 1 && firstZero!= -1) {
        		
        		for (int k = firstZero; k < (j+1) ; ++k) {
        			carte[i][k] = 1;} //remove 0 enclosed in 1
        		firstZero = -1; //Reinitialise firstZero
        	}
        }}   
        
        //count fences
        int clotures = 0;
        for (int i = 0; i < carte.length; ++i) {
        for (int j = 0; j < carte[i].length; ++j) {
        	if (carte[i][j]==1) {
        		if (i==0 || carte[i-1][j]==0) { clotures+=1; }
        		if (i==carte.length-1 || carte[i+1][j]==0) { clotures+=1; }
        		if (j==0 || carte[i][j-1]==0) { clotures+=1; }
        		if (j==carte[i].length-1 || carte[i][j+1]==0) { clotures+=1; }
        		
        	}
        }}
        
        //Print fences needed
        System.out.println("Clotures: " + clotures*2.5);
        
        //Print Map without ponds
        System.out.print("\n\n");
        for (int[] lign:carte) {
        	for (int val:lign) {
        		System.out.print(val);
        	}  
        	System.out.print("\n");
        }

    }
}